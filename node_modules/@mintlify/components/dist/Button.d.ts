import { ElementType, ComponentPropsWithoutRef, Ref } from 'react';
type ColorInterface = keyof typeof colors;
declare const colors: {
    indigo: string[];
    pink: string[];
    sky: string[];
    blue: string[];
    gray: string[];
};
export interface ButtonPropsBase<T> {
    /**
     * Color of the button. Default is `gray`.
     */
    color?: ColorInterface;
    /**
     * Color when in dark mode. Default is the same as the `color` prop.
     */
    darkColor?: ColorInterface;
    /**
     * Whether to reverse the layout.
     */
    reverse?: boolean;
    /**
     * Type of element to be rendered.
     */
    as?: T;
    /**
     * If provided, will render as an anchor element.
     */
    href?: string;
    /**
     * Ref of the element to be rendered.
     */
    mRef?: Ref<T | undefined>;
}
/**
 * Props for the `Button` component
 * @typeParam T - Type of the Element rendered by the button.
 */
export type ButtonProps<T extends ElementType> = ButtonPropsBase<T> & Omit<ComponentPropsWithoutRef<T>, keyof ButtonPropsBase<T>>;
export declare function Button<T extends ElementType = 'button'>({ as, color, darkColor, reverse, children, className, mRef, ...props }: ButtonProps<T>): JSX.Element;
export {};
