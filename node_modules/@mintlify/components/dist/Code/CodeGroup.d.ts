import React, { ComponentPropsWithoutRef, FormEventHandler, ReactElement } from 'react';
import { CopyToClipboardResult } from '../utils/copyToClipboard';
import { CodeBlockProps } from './CodeBlock';
export type CodeGroupPropsBase = {
    /**
     * Color of the filename text and the border underneath it when the content is being shown
     */
    selectedColor?: string;
    /**
     * Background color for the tooltip saying `Click to Copy` when hovering the clipboard button.
     */
    tooltipColor?: string;
    /**
     * The callback function when a user clicks on the copied to clipboard button
     */
    onCopied?: (result: CopyToClipboardResult, textToCopy?: string) => void;
    isSmallText?: boolean;
    children?: ReactElement<CodeBlockProps>[] | ReactElement<CodeBlockProps>;
    onChange?: FormEventHandler<HTMLDivElement> & ((index: number) => void);
};
export type CodeGroupProps = CodeGroupPropsBase & Omit<ComponentPropsWithoutRef<'div'>, keyof CodeGroupPropsBase>;
/**
 * Group multiple code blocks into a tabbed UI.
 * Uses CodeBlocks as children but does not render them directly. Instead,
 * CodeGroup extracts the props and renders CodeBlock's children.
 *
 * @param {CodeBlock[]} - children
 */
export declare const CodeGroup: React.ForwardRefExoticComponent<CodeGroupPropsBase & Omit<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React.HTMLAttributes<HTMLDivElement>>, keyof CodeGroupPropsBase> & React.RefAttributes<HTMLDivElement>>;
